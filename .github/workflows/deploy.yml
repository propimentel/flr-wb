name: Deploy to Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: frl-wb
  SERVICE_NAME: frl-wb-backend
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          shared/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install frontend dependencies
      run: |
        cd shared && npm install
        cd ../frontend && npm install

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run frontend tests
      run: |
        cd shared && npm run build
        cd ../frontend && npm run build

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest --verbose || echo "No tests found"

    - name: Lint code
      run: |
        cd frontend && npm run lint || echo "Linting skipped"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 0 \
          --set-env-vars "PORT=8080,FIREBASE_PROJECT_ID=frl-wb-3bb36,GCP_BUCKET_NAME=wb-files,MAX_FILES_PER_USER=5,MAX_FILE_SIZE_MB=10,RETENTION_DAYS=15,DEBUG=false,ALLOWED_ORIGINS=[\"https://frl-wb.web.app\",\"https://your-custom-domain.com\"]" \
          --set-secrets "SERVICE_CLEANUP_KEY=cleanup-service-key:latest"

    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $SERVICE_URL"

    - name: Test deployment
      run: |
        sleep 30  # Wait for service to be ready
        curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
        echo "âœ… Deployment health check passed"

  deploy-firestore-rules:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Authenticate to Firebase
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > /tmp/firebase-key.json
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-key.json
        firebase use $PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

    - name: Deploy Firestore rules
      run: |
        firebase deploy --only firestore:rules --token ${{ secrets.FIREBASE_TOKEN }}

    - name: Deploy Firebase Hosting
      run: |
        # Build frontend for hosting
        cd shared && npm install && npm run build
        cd ../frontend && npm install && npm run build
        
        # Update firebase.json with deployed service URL
        # (This would need the actual service URL from previous job)
        
        # Deploy to Firebase Hosting
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}
